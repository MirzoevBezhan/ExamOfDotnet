@page "/customers/create"
@using Domain.Dtos.Customer
@using Domain.Entities
@using Infrastructure.Data
@using Infrastructure.Interfases
@using Microsoft.EntityFrameworkCore
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Create New Customer</h3>

<EditForm Model="@Customer" OnValidSubmit="@HandleValidSubmit" FormName="createCustomer">
    <DataAnnotationsValidator/>
    <ValidationSummary class="alert alert-danger" />

    <div class="form-group mb-3">
        <label for="fullName">Full Name </label>
        <InputText @bind-Value="@Customer.FullName" id="fullName" class="form-control"/>
        <ValidationMessage For="@(() => Customer.FullName)" class="text-danger"/>
    </div>

    <div class="form-group mb-3">
        <label for="phone">Phone</label>
        <InputText @bind-Value="@Customer.Phone" id="phone" class="form-control"/>
        <ValidationMessage For="@(() => Customer.Phone)" class="text-danger"/>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</EditForm>

@code {
    private CreateCustomerDto Customer { get; set; } = new();
    private string? ErrorMessage;

    private async Task HandleValidSubmit()
    {
        var res = await CustomerService.Create(Customer);
        if (res.IsSuccsses)
        {
            NavigationManager.NavigateTo("/customers");
        }
        else
        {
            ErrorMessage = res.Message!;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/customers");
    }
}